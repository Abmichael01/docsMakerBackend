"""
Django settings for serverConfig project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+#ds1yk1fdrx$=3&yf+!q$r9sy!l$vjl8ea@_fhya_t3(okl!p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', ".vercel.app", ".now.sh", ".vercel.sh", "127.0.0.1", "9bad-102-89-68-147.ngrok-free.app", "api.sharptoolz.com", "38.242.198.49"]

# Application definition
INSTALLED_APPS = [ 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    "rest_framework",
    'rest_framework.authtoken',
    'dj_rest_auth',
    'corsheaders',
    
    'channels',
    
    #local apps
    "accounts",
    "api",
    "wallet",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'serverConfig.urls'


ASGI_APPLICATION = 'serverConfig.asgi.application'

ENV = os.getenv("ENV", "development")  # default to development


if ENV == "production":
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [os.environ.get("REDIS_URL", "redis://localhost:6379")],
            },
        }
    }
else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'serverConfig.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if ENV == "production":
    DATABASES = {
        'default': dj_database_url.parse(os.getenv("DATABASE_URL"), conn_max_age=600) # type: ignore
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# testing1


#  Custom Settings
AUTH_USER_MODEL = 'accounts.User'

REST_AUTH = {
    'LOGIN_SERIALIZER': 'accounts.serializers.LoginSerializer',
    "USER_DETAILS_SERIALIZER": "accounts.serializers.CustomUserDetailsSerializer",
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'accounts.authentication.JWTAuthenticationFromCookies',
    ),
}

# AUTHENTICATION_BACKENDS = [
#     'accounts.backends.EmailBackend',
#     'django.contrib.auth.backends.ModelBackend'
# ]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://docs-maker-demo.vercel.app",
    "http://localhost:3000",
    "https://order-tracker-demo.vercel.app",
    "https://sharptoolz.com",
]
CORS_ORIGIN_WHITELIST = [
    "http://localhost:5173",
    "https://docs-maker-demo.vercel.app",
    "http://localhost:3000",
    "https://order-tracker-demo.vercel.app",
    "https://sharptoolz.com",
]

JWT_COOKIE_SAMESITE = 'None'  # Allow cross-site cookies
JWT_COOKIE_SECURE = True      # Must be True if using HTTPS
JWT_COOKIE_HTTPONLY = True    # Prevent XSS
JWT_COOKIE_PATH = '/'         # Available site-wide

CSRF_COOKIE_SAMESITE = 'None'     # Allow cross-site cookies (for use with HTTPS)
CSRF_COOKIE_SECURE = True         # Cookie only sent over HTTPS
CSRF_COOKIE_HTTPONLY = False      # CSRF cookie must be accessible via JavaScript
CSRF_COOKIE_PATH = '/' 

SESSION_COOKIE_SAMESITE = 'None'     # Allow cross-site cookies (for use with HTTPS)
SESSION_COOKIE_SECURE = True         # Cookie only sent over HTTPS
SESSION_COOKIE_HTTPONLY = False      # CSRF cookie must be accessible via JavaScript
SESSION_COOKIE_PATH = '/' 

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'SIGNING_KEY': 'your-secret-key-here',  # use env var in prod
}

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Set to 'mandatory' if needed